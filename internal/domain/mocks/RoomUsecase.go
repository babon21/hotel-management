// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/babon21/hotel-management/internal/domain"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/babon21/hotel-management/internal/room/usecase"
)

// RoomUsecase is an autogenerated mock type for the RoomUsecase type
type RoomUsecase struct {
	mock.Mock
}

// Add provides a mock function with given fields: room
func (_m *RoomUsecase) Add(room *domain.Room) error {
	ret := _m.Called(room)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Room) error); ok {
		r0 = rf(room)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: roomId
func (_m *RoomUsecase) Delete(roomId string) error {
	ret := _m.Called(roomId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roomId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: sortField, sortOrder
func (_m *RoomUsecase) GetList(sortField usecase.SortField, sortOrder usecase.SortOrder) ([]domain.Room, error) {
	ret := _m.Called(sortField, sortOrder)

	var r0 []domain.Room
	if rf, ok := ret.Get(0).(func(usecase.SortField, usecase.SortOrder) []domain.Room); ok {
		r0 = rf(sortField, sortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(usecase.SortField, usecase.SortOrder) error); ok {
		r1 = rf(sortField, sortOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
